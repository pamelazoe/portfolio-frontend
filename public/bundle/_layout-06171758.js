
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, c as create_slot, a as validate_store, b as component_subscribe, e as validate_slots, f as isActive, u as url, g as element, t as text, h as space, j as attr_dev, k as toggle_class, l as add_location, m as insert_dev, n as append_dev, o as set_data_dev, p as detach_dev, q as update_slot, r as transition_in, w as transition_out, x as destroy_each } from './main-a11762df.js';

/* src/pages/_layout.svelte generated by Svelte v3.23.0 */
const file = "src/pages/_layout.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i].name;
	child_ctx[6] = list[i].href;
	child_ctx[7] = list[i].active;
	return child_ctx;
}

// (27:2) {#each links as { name, href, active }}
function create_each_block(ctx) {
	let li;
	let a;
	let t0;
	let t1_value = /*name*/ ctx[5] + "";
	let t1;
	let a_href_value;
	let a_class_value;
	let t2;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text("/");
			t1 = text(t1_value);
			t2 = space();
			attr_dev(a, "href", a_href_value = /*href*/ ctx[6]);
			attr_dev(a, "class", a_class_value = "web-" + /*name*/ ctx[5] + " svelte-tvvqfs");
			toggle_class(a, "active", /*active*/ ctx[7]);
			add_location(a, file, 28, 6, 540);
			add_location(li, file, 27, 4, 529);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t0);
			append_dev(a, t1);
			append_dev(li, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*links*/ 1 && t1_value !== (t1_value = /*name*/ ctx[5] + "")) set_data_dev(t1, t1_value);

			if (dirty & /*links*/ 1 && a_href_value !== (a_href_value = /*href*/ ctx[6])) {
				attr_dev(a, "href", a_href_value);
			}

			if (dirty & /*links*/ 1 && a_class_value !== (a_class_value = "web-" + /*name*/ ctx[5] + " svelte-tvvqfs")) {
				attr_dev(a, "class", a_class_value);
			}

			if (dirty & /*links, links*/ 1) {
				toggle_class(a, "active", /*active*/ ctx[7]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(27:2) {#each links as { name, href, active }}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let ul;
	let t;
	let current;
	let each_value = /*links*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const default_slot_template = /*$$slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (default_slot) default_slot.c();
			add_location(ul, file, 25, 0, 478);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			insert_dev(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*links*/ 1) {
				each_value = /*links*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let $url;
	let $isActive;
	validate_store(url, "url");
	component_subscribe($$self, url, $$value => $$invalidate(1, $url = $$value));
	validate_store(isActive, "isActive");
	component_subscribe($$self, isActive, $$value => $$invalidate(2, $isActive = $$value));
	let links = [];
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Layout> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Layout", $$slots, ['default']);

	$$self.$set = $$props => {
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ isActive, url, links, $url, $isActive });

	$$self.$inject_state = $$props => {
		if ("links" in $$props) $$invalidate(0, links = $$props.links);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$url, $isActive*/ 6) {
			 $$invalidate(0, links = [
				["./index", "Home"],
				["./skills", "Skills"],
				["./about", "About"],
				["./lists", "Lists"],
				["./projects", "Projects"]
			].map(([path, name]) => {
				return {
					name, //add index if you don't want siblings to be considered children
					href: $url(path),
					active: $isActive(path)
				};
			}));
		}
	};

	return [links, $url, $isActive, $$scope, $$slots];
}

class Layout extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Layout",
			options,
			id: create_fragment.name
		});
	}
}

export default Layout;
//# sourceMappingURL=_layout-06171758.js.map
